	//int sq64 = 0;
	
    printf("\n");
    PrintBitBoard(playBitBoard);
    int count = CNT(playBitBoard);
    printf("Count: %d\n",count);
    printf("\n");
    
    int index = POP(&playBitBoard);
    PrintBitBoard(playBitBoard);
    count = CNT(playBitBoard);
    printf("Count: %d\n",count);
    printf("\n");

    index = POP(&playBitBoard);
    PrintBitBoard(playBitBoard);
    count = CNT(playBitBoard);
    printf("Count: %d\n",count);
    printf("\n");

    index = POP(&playBitBoard);
    PrintBitBoard(playBitBoard);
    count = CNT(playBitBoard);
    printf("Count: %d\n",count);
    printf("\n");


    Ver 10

#include "stdio.h"
#include "defs.h"



int main() {

	AllInit();
	
	int index = 0;
	U64 playBitBoard = 0ULL;

	
	SETBIT(playBitBoard, 61);
	PrintBitBoard(playBitBoard);
	
	
	CLRBIT(playBitBoard, 61);
	PrintBitBoard(playBitBoard);
	
	return 0;
}

Part 11
// vice.c

#include "stdio.h"
#include "stdlib.h"
#include "defs.h"

int main() {

	AllInit();
	
	int PieceOne = rand();
	int PieceTwo = rand();
	int PieceThree = rand();
	int PieceFour = rand();
	
	printf("PieceOne:%X\n",PieceOne);
	printf("PieceTwo:%X\n",PieceTwo);
	printf("PieceThree:%X\n",PieceThree);
	printf("PieceFour:%X\n",PieceFour);
	
	int Key = PieceOne ^ PieceTwo ^ PieceFour;
	int TempKey = PieceTwo;
	TempKey ^= PieceThree;
	TempKey ^= PieceFour;
	TempKey ^= PieceOne;	
	
	printf("Key:%X\n",Key);
	printf("TempKey:%X\n",TempKey);	
	
	TempKey ^= PieceThree;
	printf("(Three out) TempKey:%X\n",TempKey);
	
	
	TempKey ^= PieceThree;
	printf("(Three in again) TempKey:%X\n",TempKey);
	
	return 0;

    Part 19

#define FEN1 "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1"
#define FEN2 "rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 2"
#define FEN3 "rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2"

int main() {

	

	AllInit();	

	S_BOARD board[1];
	
	ParseFen(START_FEN, board);
	PrintBoard(board);
	
	ParseFen(FEN1, board);
	PrintBoard(board);
	
	ParseFen(FEN2, board);
	PrintBoard(board);
	
	ParseFen(FEN3, board);
	PrintBoard(board);
	
	return 0;

Part 20 

#define FEN1 "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1"
#define FEN2 "rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 2"
#define FEN3 "rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2"
#define FEN4 "r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1"

int main() {	

	AllInit();	

	S_BOARD board[1];
	
	ParseFen(FEN4, board);
	
	PrintBoard(board);
	
	ASSERT(CheckBoard(board));
	printf("\nForced asserts...\n");
	board->posKey ^= SideKey;
	ASSERT(CheckBoard(board));
	
	
	return 0;
}

Part 23
// vice.c

#include "stdio.h"
#include "defs.h"
#include "stdlib.h"

#define FEN1 "8/3q1p2/8/5P2/4Q3/8/8/8 w - - 0 2 "
#define FEN2 "rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 2"
#define FEN3 "rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2"
#define FEN4 "r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1"

void ShowSqAtBySide(const int side, const S_BOARD *pos) {
		
	int rank = 0;
	int file = 0;
	int sq = 0;
	
	printf("\n\nSquares attacked by:%c\n",SideChar[side]);
	for(rank = RANK_8; rank >= RANK_1; --rank) {
		for(file = FILE_A; file <= FILE_H; ++file) {
			sq = FR2SQ(file,rank);
			if(SqAttacked(sq,side,pos)==TRUE) {
				printf("X");
			} else {
				printf("-");
			}
				
		}
		printf("\n");
	}  
    printf("\n\n");

}


int main() {	

	AllInit();	

	S_BOARD board[1];
	
	ParseFen(FEN1, board);	
	PrintBoard(board);	
	//ASSERT(CheckBoard(board));
	
	printf("\n\nWhite Attacking:\n");
	ShowSqAtBySide(WHITE,board);
	
	printf("\n\nBlack Attacking:\n");
	ShowSqAtBySide(BLACK,board);
	return 0;
} 

Part 26 
// vice.c

#include "stdio.h"
#include "defs.h"
#include "stdlib.h"

#define FEN4 "r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1"

void PrintBin(int move) {

	int index = 0;
	printf("As binary:\n");
	for(index = 27; index >= 0; index--) {
		if( (1<<index) & move) printf("1");
		else printf("0");
		if(index!=28 && index%4==0) printf(" ");
	}
	printf("\n");
}

int main() {	

	AllInit();	

	S_BOARD board[1];
	
	ParseFen(FEN4, board);	
	PrintBoard(board);	
	ASSERT(CheckBoard(board));	
	
	int move = 0;
	int from = 6; int to = 12;
	int cap = wR; int prom = bR;
	
	move = ( ( from ) | ( to << 7 ) | ( cap << 14 ) | ( prom << 20) );
	
	printf("\ndec:%d hex:%X\n",move,move);
	PrintBin(move);
	
	printf("from:%d to:%d cap:%d prom:%d\n",
		FROMSQ(move),TOSQ(move),CAPTURED(move),
		PROMOTED(move));
		
	//move |= MFLAGPS;
	
	printf("is PST:%s\n",(move & MFLAGPS)?"YES":"NO");
	
	return 0;
}

part27
// vice.c

#include "stdio.h"
#include "defs.h"
#include "stdlib.h"

#define FEN4 "r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1"

void PrintBin(int move) {

	int index = 0;
	printf("As binary:\n");
	for(index = 27; index >= 0; index--) {
		if( (1<<index) & move) printf("1");
		else printf("0");
		if(index!=28 && index%4==0) printf(" ");
	}
	printf("\n");
}

int main() {	

	AllInit();	
	
	int move = 0;
	int from = A2; int to = H7;
	int cap = wR; int prom = bK;
	
	move = ( ( from ) | ( to << 7 ) | ( cap << 14 ) | ( prom << 20) );
			
	printf("from:%d to:%d cap:%d prom:%d\n",
		FROMSQ(move),TOSQ(move),CAPTURED(move),
		PROMOTED(move));
	
	printf("Algebraic from:%s\n",PrSq(from));
	printf("Algebraic to:%s\n",PrSq(to));
	printf("Algebraic move:%s\n",PrMove(move));
	
	
	return 0;
}

Part31
// vice.c

#include "stdio.h"
#include "defs.h"
#include "stdlib.h"

#define PAWNMOVESW "rnbqkb1r/pp1p1pPp/8/2p1pP2/1P1P4/3P3P/P1P1P3/RNBQKBNR w KQkq e6 0 1"
#define PAWNMOVESB "rnbqkbnr/p1p1p3/3p3p/1p1p4/2P1Pp2/8/PP1P1PpP/RNBQKB1R b KQkq e3 0 1"

int main() {	

	AllInit();		
	
	S_BOARD board[1];
	
	ParseFen(PAWNMOVESB,board);
	PrintBoard(board);
	
	S_MOVELIST list[1];
	
	GenerateAllMoves(board,list);
	
	PrintMoveList(list);
	
	return 0;
}

Part 36
// vice.c

#include "stdio.h"
#include "defs.h"
#include "stdlib.h"

#define CASTLE1 "r3k2r/8/8/8/8/8/8/R3K2R w KQkq - 0 1"
#define CASTLE2 "r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1"

int main() {	

	AllInit();		
	
	S_BOARD board[1];
	S_MOVELIST list[1];
	
	ParseFen(CASTLE2,board);
	GenerateAllMoves(board,list);
	
	PrintMoveList(list);
	
	return 0;
}

Part 44

// vice.c

#include "stdio.h"
#include "defs.h"
#include "stdlib.h"


#define PERFTFEN "r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1"

int main() {	

	AllInit();		
	
	S_BOARD board[1];
	S_MOVELIST list[1];
	
	ParseFen(PERFTFEN,board);
	PerftTest(3,board);
	
	return 0;
}